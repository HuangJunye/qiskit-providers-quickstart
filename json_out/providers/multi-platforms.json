{
  "id": "multi-platforms",
  "title": "Multi-platforms",
  "description": "Cloud services that allow you to connect with several quantum services from different vendors.",
  "providers": [
    {
      "title": "Azure Quantum",
      "image": null,
      "description": "Qiskit provider for IonQ backends.",
      "installation": "pip install \"azure-quantum[qiskit]\"",
      "websiteCta": {
        "label": "Website",
        "url": "https://aka.ms/aq"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://aka.ms/AQ/Qiskit/QuickStart"
      },
      "sourceCta": {
        "label": null,
        "url": null
      },
      "codeExamples": [
        {
          "name": "bell",
          "runMethod": "backend",
          "fullCode": [
            "from azure.quantum.qiskit import AzureQuantumProvider",
            "provider = AzureQuantumProvider(resource_id=\"MY_RESOURCE_ID\",location=\"MY_LOCATION\")",
            "backend = provider.get_backend(\"ionq.simulator\")",
            "&nbsp;",
            "# Build and transpile circuit",
            "from qiskit import QuantumCircuit, transpile",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        },
        {
          "name": "bell",
          "runMethod": "sampler",
          "fullCode": [
            "from azure.quantum.qiskit import AzureQuantumProvider",
            "from qiskit.primitives import BackendSampler",
            "provider = AzureQuantumProvider(resource_id=\"MY_RESOURCE_ID\",location=\"MY_LOCATION\")",
            "backend = provider.get_backend(\"ionq.simulator\")",
            "sampler = BackendSampler(backend)",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Run the circuit and get result distribution",
            "job = sampler.run(circuit)",
            "quasi_dist = job.result().quasi_dists[0]",
            "print(quasi_dist)"
          ]
        },
        {
          "name": "vqe",
          "runMethod": "estimator",
          "fullCode": [
            "from azure.quantum.qiskit import AzureQuantumProvider",
            "from qiskit.primitives import BackendEstimator",
            "provider = AzureQuantumProvider(resource_id=\"MY_RESOURCE_ID\",location=\"MY_LOCATION\")",
            "backend = provider.get_backend(\"ionq.simulator\")",
            "estimator = BackendEstimator(backend)",
            "&nbsp;",
            "from qiskit.quantum_info import SparsePauliOp",
            "&nbsp;",
            "H2_op = SparsePauliOp.from_list([",
            "    (\"II\", -1.052373245772859),",
            "    (\"IZ\", 0.39793742484318045),",
            "    (\"ZI\", -0.39793742484318045),",
            "    (\"ZZ\", -0.01128010425623538),",
            "    (\"XX\", 0.18093119978423156)",
            "])",
            "&nbsp;",
            "# Calculate ground state energy using VQE",
            "from qiskit.circuit.library import TwoLocal",
            "from qiskit.algorithms.optimizers import SLSQP",
            "from qiskit.algorithms.minimum_eigensolvers import VQE",
            "&nbsp;",
            "ansatz = TwoLocal(2, \"ry\", \"cz\")",
            "optimizer = SLSQP(maxiter=1000)",
            "vqe = VQE(estimator, ansatz, optimizer)",
            "result = vqe.compute_minimum_eigenvalue(operator=H2_op)",
            "print(result.eigenvalue)"
          ]
        }
      ]
    },
    {
      "title": "Amazon Braket",
      "image": null,
      "description": "Execute Qiskit programs on AWS quantum computing hardware devices through Amazon Braket",
      "installation": "pip install qiskit_braket_provider",
      "websiteCta": {
        "label": "Website",
        "url": "https://aws.amazon.com/braket/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://qiskit-community.github.io/qiskit-braket-provider/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/qiskit-community/qiskit-braket-provider"
      },
      "codeExamples": [
        {
          "name": "bell",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_braket_provider import AWSBraketProvider",
            "provider = AWSBraketProvider()",
            "backend = provider.backends(\"SV1\")",
            "&nbsp;",
            "# Build and transpile circuit",
            "from qiskit import QuantumCircuit, transpile",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        },
        {
          "name": "bell",
          "runMethod": "sampler",
          "fullCode": [
            "from qiskit_braket_provider import AWSBraketProvider",
            "from qiskit.primitives import BackendSampler",
            "provider = AWSBraketProvider()",
            "backend = provider.backends(\"SV1\")",
            "sampler = BackendSampler(backend)",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Run the circuit and get result distribution",
            "job = sampler.run(circuit)",
            "quasi_dist = job.result().quasi_dists[0]",
            "print(quasi_dist)"
          ]
        },
        {
          "name": "vqe",
          "runMethod": "estimator",
          "fullCode": [
            "from qiskit_braket_provider import AWSBraketProvider",
            "from qiskit.primitives import BackendEstimator",
            "provider = AWSBraketProvider()",
            "backend = provider.backends(\"SV1\")",
            "estimator = BackendEstimator(backend)",
            "&nbsp;",
            "from qiskit.quantum_info import SparsePauliOp",
            "&nbsp;",
            "H2_op = SparsePauliOp.from_list([",
            "    (\"II\", -1.052373245772859),",
            "    (\"IZ\", 0.39793742484318045),",
            "    (\"ZI\", -0.39793742484318045),",
            "    (\"ZZ\", -0.01128010425623538),",
            "    (\"XX\", 0.18093119978423156)",
            "])",
            "&nbsp;",
            "# Calculate ground state energy using VQE",
            "from qiskit.circuit.library import TwoLocal",
            "from qiskit.algorithms.optimizers import SLSQP",
            "from qiskit.algorithms.minimum_eigensolvers import VQE",
            "&nbsp;",
            "ansatz = TwoLocal(2, \"ry\", \"cz\")",
            "optimizer = SLSQP(maxiter=1000)",
            "vqe = VQE(estimator, ansatz, optimizer)",
            "result = vqe.compute_minimum_eigenvalue(operator=H2_op)",
            "print(result.eigenvalue)"
          ]
        }
      ]
    },
    {
      "title": "SuperstaQ",
      "image": null,
      "description": "A hardware-agnostic software platform that connects applications to quantum computers from IBM Quantum, IonQ, and Rigetti.",
      "installation": "pip install qiskit-superstaq",
      "websiteCta": {
        "label": "Website",
        "url": "https://www.super.tech/about-superstaq/"
      },
      "docsCta": {
        "label": "Docs",
        "url": null
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/SupertechLabs/qiskit-superstaq"
      },
      "codeExamples": [
        {
          "name": "bell",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_superstaq import SuperstaQProvider",
            "provider = SuperstaQProvider(\"MY_SUPERSTAQ_TOKEN\")",
            "backend = provider.get_backend(\"ibmq_qasm_simulator\")",
            "&nbsp;",
            "# Build and transpile circuit",
            "from qiskit import QuantumCircuit, transpile",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        },
        {
          "name": "bell",
          "runMethod": "sampler",
          "fullCode": [
            "from qiskit_superstaq import SuperstaQProvider",
            "from qiskit.primitives import BackendSampler",
            "provider = SuperstaQProvider(\"MY_SUPERSTAQ_TOKEN\")",
            "backend = provider.get_backend(\"ibmq_qasm_simulator\")",
            "sampler = BackendSampler(backend)",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Run the circuit and get result distribution",
            "job = sampler.run(circuit)",
            "quasi_dist = job.result().quasi_dists[0]",
            "print(quasi_dist)"
          ]
        },
        {
          "name": "vqe",
          "runMethod": "estimator",
          "fullCode": [
            "from qiskit_superstaq import SuperstaQProvider",
            "from qiskit.primitives import BackendEstimator",
            "provider = SuperstaQProvider(\"MY_SUPERSTAQ_TOKEN\")",
            "backend = provider.get_backend(\"ibmq_qasm_simulator\")",
            "estimator = BackendEstimator(backend)",
            "&nbsp;",
            "from qiskit.quantum_info import SparsePauliOp",
            "&nbsp;",
            "H2_op = SparsePauliOp.from_list([",
            "    (\"II\", -1.052373245772859),",
            "    (\"IZ\", 0.39793742484318045),",
            "    (\"ZI\", -0.39793742484318045),",
            "    (\"ZZ\", -0.01128010425623538),",
            "    (\"XX\", 0.18093119978423156)",
            "])",
            "&nbsp;",
            "# Calculate ground state energy using VQE",
            "from qiskit.circuit.library import TwoLocal",
            "from qiskit.algorithms.optimizers import SLSQP",
            "from qiskit.algorithms.minimum_eigensolvers import VQE",
            "&nbsp;",
            "ansatz = TwoLocal(2, \"ry\", \"cz\")",
            "optimizer = SLSQP(maxiter=1000)",
            "vqe = VQE(estimator, ansatz, optimizer)",
            "result = vqe.compute_minimum_eigenvalue(operator=H2_op)",
            "print(result.eigenvalue)"
          ]
        }
      ]
    },
    {
      "title": "QC Ware Forge",
      "image": null,
      "description": null,
      "installation": null,
      "websiteCta": {
        "label": "Website",
        "url": "https://forge.qcware.com/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://github.com/qcware/qiskit_qcware/blob/master/notebooks/basic_demo.ipynb"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/qcware/qiskit_qcware"
      },
      "codeExamples": [
        {
          "name": "bell",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_qcware import QcwareProvider",
            "provider = QcwareProvider()",
            "backend = provider.get_backend('forge_statevector')",
            "&nbsp;",
            "# Build and transpile circuit",
            "from qiskit import QuantumCircuit, transpile",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        },
        {
          "name": "bell",
          "runMethod": "sampler",
          "fullCode": [
            "from qiskit_qcware import QcwareProvider",
            "from qiskit.primitives import BackendSampler",
            "provider = QcwareProvider()",
            "backend = provider.get_backend('forge_statevector')",
            "sampler = BackendSampler(backend)",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Run the circuit and get result distribution",
            "job = sampler.run(circuit)",
            "quasi_dist = job.result().quasi_dists[0]",
            "print(quasi_dist)"
          ]
        },
        {
          "name": "vqe",
          "runMethod": "estimator",
          "fullCode": [
            "from qiskit_qcware import QcwareProvider",
            "from qiskit.primitives import BackendEstimator",
            "provider = QcwareProvider()",
            "backend = provider.get_backend('forge_statevector')",
            "estimator = BackendEstimator(backend)",
            "&nbsp;",
            "from qiskit.quantum_info import SparsePauliOp",
            "&nbsp;",
            "H2_op = SparsePauliOp.from_list([",
            "    (\"II\", -1.052373245772859),",
            "    (\"IZ\", 0.39793742484318045),",
            "    (\"ZI\", -0.39793742484318045),",
            "    (\"ZZ\", -0.01128010425623538),",
            "    (\"XX\", 0.18093119978423156)",
            "])",
            "&nbsp;",
            "# Calculate ground state energy using VQE",
            "from qiskit.circuit.library import TwoLocal",
            "from qiskit.algorithms.optimizers import SLSQP",
            "from qiskit.algorithms.minimum_eigensolvers import VQE",
            "&nbsp;",
            "ansatz = TwoLocal(2, \"ry\", \"cz\")",
            "optimizer = SLSQP(maxiter=1000)",
            "vqe = VQE(estimator, ansatz, optimizer)",
            "result = vqe.compute_minimum_eigenvalue(operator=H2_op)",
            "print(result.eigenvalue)"
          ]
        }
      ]
    },
    {
      "title": "Gaqqie",
      "image": null,
      "description": "An open-source quantum computer cloud platform",
      "installation": "pip install gaqqie-door",
      "websiteCta": {
        "label": "Website",
        "url": null
      },
      "docsCta": {
        "label": "Docs",
        "url": null
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/gaqqie/gaqqie"
      },
      "codeExamples": [
        {
          "name": "bell",
          "runMethod": "backend",
          "fullCode": [
            "from gaqqie_door import QiskitGaqqie",
            "# rewrite to the endpoint URL of the user API",
            "url = \"https://<api-id>.execute-api.<region>.amazonaws.com/<stage>\"",
            "QiskitGaqqie.enable_account(url)",
            "backend = QiskitGaqqie.get_backend(\"qiskit_simulator\")",
            "&nbsp;",
            "# Build and transpile circuit",
            "from qiskit import QuantumCircuit, transpile",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        },
        {
          "name": "bell",
          "runMethod": "sampler",
          "fullCode": [
            "from gaqqie_door import QiskitGaqqie",
            "from qiskit.primitives import BackendSampler",
            "# rewrite to the endpoint URL of the user API",
            "url = \"https://<api-id>.execute-api.<region>.amazonaws.com/<stage>\"",
            "QiskitGaqqie.enable_account(url)",
            "backend = QiskitGaqqie.get_backend(\"qiskit_simulator\")",
            "sampler = BackendSampler(backend)",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Run the circuit and get result distribution",
            "job = sampler.run(circuit)",
            "quasi_dist = job.result().quasi_dists[0]",
            "print(quasi_dist)"
          ]
        },
        {
          "name": "vqe",
          "runMethod": "estimator",
          "fullCode": [
            "from gaqqie_door import QiskitGaqqie",
            "from qiskit.primitives import BackendEstimator",
            "# rewrite to the endpoint URL of the user API",
            "url = \"https://<api-id>.execute-api.<region>.amazonaws.com/<stage>\"",
            "QiskitGaqqie.enable_account(url)",
            "backend = QiskitGaqqie.get_backend(\"qiskit_simulator\")",
            "estimator = BackendEstimator(backend)",
            "&nbsp;",
            "from qiskit.quantum_info import SparsePauliOp",
            "&nbsp;",
            "H2_op = SparsePauliOp.from_list([",
            "    (\"II\", -1.052373245772859),",
            "    (\"IZ\", 0.39793742484318045),",
            "    (\"ZI\", -0.39793742484318045),",
            "    (\"ZZ\", -0.01128010425623538),",
            "    (\"XX\", 0.18093119978423156)",
            "])",
            "&nbsp;",
            "# Calculate ground state energy using VQE",
            "from qiskit.circuit.library import TwoLocal",
            "from qiskit.algorithms.optimizers import SLSQP",
            "from qiskit.algorithms.minimum_eigensolvers import VQE",
            "&nbsp;",
            "ansatz = TwoLocal(2, \"ry\", \"cz\")",
            "optimizer = SLSQP(maxiter=1000)",
            "vqe = VQE(estimator, ansatz, optimizer)",
            "result = vqe.compute_minimum_eigenvalue(operator=H2_op)",
            "print(result.eigenvalue)"
          ]
        }
      ]
    },
    {
      "title": "Strangeworks",
      "image": null,
      "description": null,
      "installation": "pip install strangeworks-qiskit",
      "websiteCta": {
        "label": "Website",
        "url": "https://strangeworks.com/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://strangeworks.github.io/strangeworks-qiskit/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": null
      },
      "codeExamples": [
        {
          "name": "bell",
          "runMethod": "backend",
          "fullCode": [
            "import strangeworks",
            "from strangeworks_qiskit import StrangeworksProvider",
            "# get your API key from the Strangeworks Portal",
            "strangeworks.authenticate(api_key=\"your-api-key\")",
            "provider = StrangeworksProvider()",
            "backend = provider.get_backend(\"ibmq_qasm_simulator\")",
            "&nbsp;",
            "# Build and transpile circuit",
            "from qiskit import QuantumCircuit, transpile",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        },
        {
          "name": "bell",
          "runMethod": "sampler",
          "fullCode": [
            "import strangeworks",
            "from qiskit.primitives import BackendSampler",
            "from strangeworks_qiskit import StrangeworksProvider",
            "# get your API key from the Strangeworks Portal",
            "strangeworks.authenticate(api_key=\"your-api-key\")",
            "provider = StrangeworksProvider()",
            "backend = provider.get_backend(\"ibmq_qasm_simulator\")",
            "sampler = BackendSampler(backend)",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Run the circuit and get result distribution",
            "job = sampler.run(circuit)",
            "quasi_dist = job.result().quasi_dists[0]",
            "print(quasi_dist)"
          ]
        },
        {
          "name": "vqe",
          "runMethod": "estimator",
          "fullCode": [
            "import strangeworks",
            "from qiskit.primitives import BackendEstimator",
            "from strangeworks_qiskit import StrangeworksProvider",
            "# get your API key from the Strangeworks Portal",
            "strangeworks.authenticate(api_key=\"your-api-key\")",
            "provider = StrangeworksProvider()",
            "backend = provider.get_backend(\"ibmq_qasm_simulator\")",
            "estimator = BackendEstimator(backend)",
            "&nbsp;",
            "from qiskit.quantum_info import SparsePauliOp",
            "&nbsp;",
            "H2_op = SparsePauliOp.from_list([",
            "    (\"II\", -1.052373245772859),",
            "    (\"IZ\", 0.39793742484318045),",
            "    (\"ZI\", -0.39793742484318045),",
            "    (\"ZZ\", -0.01128010425623538),",
            "    (\"XX\", 0.18093119978423156)",
            "])",
            "&nbsp;",
            "# Calculate ground state energy using VQE",
            "from qiskit.circuit.library import TwoLocal",
            "from qiskit.algorithms.optimizers import SLSQP",
            "from qiskit.algorithms.minimum_eigensolvers import VQE",
            "&nbsp;",
            "ansatz = TwoLocal(2, \"ry\", \"cz\")",
            "optimizer = SLSQP(maxiter=1000)",
            "vqe = VQE(estimator, ansatz, optimizer)",
            "result = vqe.compute_minimum_eigenvalue(operator=H2_op)",
            "print(result.eigenvalue)"
          ]
        }
      ]
    }
  ]
}