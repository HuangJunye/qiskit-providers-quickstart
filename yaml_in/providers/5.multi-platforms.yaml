id: multi-platforms
title: Multi-platforms
description: Cloud services that allow you to connect with several quantum services from different vendors.
providers:
  - title: Amazon Braket
    description: Amazon Braket is a fully managed quantum computing service designed to help speed up scientific research and software development for quantum computing. 
    installation: pip install qiskit_braket_provider
    websiteCta:
      label: Website
      url: https://aws.amazon.com/braket/
    docsCta:
      label: Docs
      url: https://qiskit-community.github.io/qiskit-braket-provider/
    sourceCta:
      label: GitHub
      url: https://github.com/qiskit-community/qiskit-braket-provider
    code: 
      backend: |-
        from qiskit_braket_provider import AWSBraketProvider
        provider = AWSBraketProvider()
        # QuEra Aquila is a 256-qubit quantum processor based on
        # programmable arrays of neutral Rubidium atoms
        backend = provider.backends("Aquila")
  - title: Azure Quantum
    description: Azure Quantum is the cloud quantum computing service of Azure, with a diverse set of quantum solutions and technologies.
    installation: pip install "azure-quantum[qiskit]"
    websiteCta:
      label: Website
      url: https://aka.ms/aq
    docsCta:
      label: Docs
      url: https://aka.ms/AQ/Qiskit/QuickStart
    sourceCta:
      label: null
      url: null
    code: 
      backend: |-
        from azure.quantum.qiskit import AzureQuantumProvider
        provider = AzureQuantumProvider(resource_id="MY_RESOURCE_ID",location="MY_LOCATION")
        backend = provider.get_backend("quantinuum.qpu.h1-2")
  - title: Gaqqie
    description: Gaqqie is an open-source quantum computer cloud platform.
    installation: pip install gaqqie-door
    websiteCta:
      label: Website
      url: null
    docsCta:
      label: Docs
      url: https://github.com/gaqqie/gaqqie/blob/main/docs/document.pdf
    sourceCta:
      label: GitHub
      url: https://github.com/gaqqie/gaqqie
    code:
      backend: |-
        from gaqqie_door import QiskitGaqqie
        # rewrite to the endpoint URL of the user API
        url = "https://<api-id>.execute-api.<region>.amazonaws.com/<stage>"
        QiskitGaqqie.enable_account(url)
        backend = QiskitGaqqie.get_backend("qiskit_simulator")
  - title: QC Ware Forge
    description: QC Ware Forge is an unique and efficient turn-key algorithms for data scientists and powerful circuit building blocks for quantum engineers. 
    installation: pip install qiskit-qcware
    websiteCta:
      label: Website
      url: https://forge.qcware.com/
    docsCta:
      label: Docs
      url: https://github.com/qcware/qiskit_qcware/blob/master/notebooks/basic_demo.ipynb
    sourceCta:
      label: GitHub
      url: https://github.com/qcware/qiskit_qcware
    code:
      backend: |-
        from qiskit_qcware import QcwareProvider
        provider = QcwareProvider()
        backend = provider.get_backend('forge_statevector')
  - title: Strangeworks
    description: Strangeworks is the ultimate collaboration of hardware, software, education, and service providers, working to develop and test quantum and future compute technologies.
    installation: pip install strangeworks-qiskit
    websiteCta:
      label: Website
      url: https://strangeworks.com/
    docsCta:
      label: Docs
      url: https://strangeworks.github.io/strangeworks-qiskit/
    sourceCta:
      label: GitHub
      url: null
    code:
      backend: |-
        import strangeworks
        from strangeworks_qiskit import StrangeworksProvider
        # get your API key from the Strangeworks Portal
        strangeworks.authenticate(api_key="your-api-key")
        provider = StrangeworksProvider()
        # Xanadu Borealis is a photonic quantum computer with a programmable loop-based
        # interferometer with over 216 squeezed-state qubits
        backend = provider.get_backend("borealis")
  - title: SuperstaQ
    description: SuperstaQ is a hardware-agnostic software platform that connects applications to quantum computers from IBM Quantum, IonQ, and Rigetti.
    installation: pip install qiskit-superstaq
    websiteCta:
      label: Website
      url: https://www.super.tech/about-superstaq/
    docsCta:
      label: Docs
      url: null
    sourceCta:
      label: GitHub
      url: https://github.com/SupertechLabs/qiskit-superstaq
    code:
      backend: |-
        from qiskit_superstaq import SuperstaQProvider
        provider = SuperstaQProvider("MY_SUPERSTAQ_TOKEN")
        backend = provider.get_backend("aws_sv1_simulator")
