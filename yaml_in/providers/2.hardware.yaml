id: hardware
title: Quantum Hardware
description: Cloud services that allow users to execute quantum programs in specialized hardware that leverages quantum mechanical phenomena for quantum computation.
providers:
  - title: IBM Quantum Platform
    image: /images/providers/qiskit-ibm-provider.png
    description: IBM Quantum platform offers access to IBM Quantum systems and simulators.
    installation: pip install qiskit-ibm-provider
    websiteCta:
      label: Website
      url: https://quantum-computing.ibm.com/services?services=systems
    docsCta:
      label: Docs
      url: https://qiskit.org/documentation/partners/qiskit_ibm_provider/
    sourceCta:
      label: GitHub
      url: https://github.com/Qiskit/qiskit-ibm-provider
    code: 
      backend: |-
        from qiskit_ibm_provider import IBMProvider
        IBMProvider.save_account("MY_IBM_QUANTUM_TOKEN")
        provider = IBMProvider()
        backend = provider.get_backend("ibm_nairobi")
  - title: IonQ
    image: null
    description: IonQ is quantum computing hardware and software company that develops general-purpose trapped ion quantum computers.
    installation: pip install qiskit-ionq
    websiteCta:
      label: Website
      url: https://ionq.com/
    docsCta:
      label: Docs
      url: https://qiskit.org/documentation/partners/ionq/
    sourceCta:
      label: GitHub
      url: https://github.com/Qiskit-Partners/qiskit-ionq
    code:
      backend: |-
        from qiskit_ionq import IonQProvider
        provider = IonQProvider("MY_IONQ_TOKEN")
        backend = provider.get_backend("ionq_simulator")
  - title: Quantinuum
    image: null
    description: Formally Honeywell, Quantinuum focuses on trapped-ion computing.
    installation: pip install qiskit-quantinuum-provider
    websiteCta:
      label: Website
      url: https://www.quantinuum.com/
    docsCta:
      label: Docs
      url: https://github.com/qiskit-community/qiskit-quantinuum-provider/blob/master/examples/QuantinuumExample.ipynb
    sourceCta:
      label: GitHub
      url: https://github.com/qiskit-community/qiskit-quantinuum-provider
    code:
      backend: |-
        from qiskit_quantinuum import Quantinuum
        Quantinuum.save_account("username@company.com")
        backend = Quantinuum.get_backend("DEVICE_NAME")
  - title: AQT
    image: null
    description: AQT provides to partners ion-trap quantum system that operate at room temperature.
    installation: pip install qiskit-aqt-provider
    websiteCta:
      label: Website
      url: https://www.aqt.eu/qc-systems/
    docsCta:
      label: Docs
      url: https://qiskit.org/documentation/partners/aqt/
    sourceCta:
      label: GitHub
      url: https://github.com/Qiskit-Partners/qiskit-aqt-provider
    code:
      backend: |-
        from qiskit_aqt_provider import AQTProvider
        aqt = AQTProvider('MY_TOKEN')
        backend = aqt.get_backend('aqt_qasm_simulator')
  - title: Rigetti
    image: null
    description: null
    installation: pip install qiskit-rigetti
    websiteCta:
      label: Website
      url: https://www.rigetti.com/
    docsCta:
      label: Docs
      url: https://qiskit-rigetti.readthedocs.io/en/latest/
    sourceCta:
      label: GitHub
      url: https://github.com/rigetti/qiskit-rigetti
    code:
      backend: |-
        from qiskit_rigetti import RigettiQCSProvider
        provider = RigettiQCSProvider()
        backend = provider.get_backend(name="Aspen-9")
  - title: IQM
    image: null
    description: Qiskit adapter for IQMâ€™s quantum computers.
    installation: pip install qiskit-iqm
    websiteCta:
      label: Website
      url: https://www.meetiqm.com/
    docsCta:
      label: Docs
      url: https://iqm-finland.github.io/qiskit-on-iqm/
    sourceCta:
      label: GitHub
      url: https://github.com/iqm-finland/qiskit-on-iqm
    code:
      backend: |-
        from qiskit_iqm import IQMProvider
        provider = IQMProvider(iqm_server_url)
        backend = provider.get_backend()