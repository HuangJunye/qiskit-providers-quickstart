id: cloud-simulators
title: Cloud Simulators
description: Cloud services that allow you to simulate quantum programs in high performance computers.
providers:
  - title: IBM Quantum
    description: IBM Quantum features a collection of high-performance simulators for prototyping quantum circuits and algorithms, and exploring their performance under realistic device noise models.
    installation: pip install qiskit-ibm-provider
    websiteCta:
      label: Website
      url: https://quantum-computing.ibm.com/services/resources?tab=simulators
    docsCta:
      label: Docs
      url: https://qiskit.org/documentation/partners/qiskit_ibm_provider/
    sourceCta:
      label: GitHub
      url: https://github.com/Qiskit/qiskit-ibm-provider
    code: 
      backend: |-
        from qiskit_ibm_provider import IBMProvider
        provider = IBMProvider()
        backend = provider.get_backend("simulator_statevector")
  - title: IonQ
    description: The IonQ Quantum Cloud providers 29-qubit cloud simulator.
    installation: pip install qiskit-ionq
    websiteCta:
      label: Website
      url: https://ionq.com/resources/the-value-of-classical-quantum-simulators
    docsCta:
      label: Docs
      url: https://qiskit.org/documentation/partners/ionq/
    sourceCta:
      label: GitHub
      url: https://github.com/Qiskit-Partners/qiskit-ionq
    code:
      backend: |-
        from qiskit_ionq import IonQProvider
        provider = IonQProvider("MY_IONQ_TOKEN")
        backend = provider.get_backend("ionq_simulator")
  - title: Rigetti Quantum Virtual Machine (QVM)
    description: The Rigetti Quantum Virtual Machine is a wavefunction simulation of unitary evolution with classical control flow and shared quantum classical memory.
    installation: pip install qiskit-rigetti
    websiteCta:
      label: Website
      url: https://www.rigetti.com/applications/qvm
    docsCta:
      label: Docs
      url: https://qiskit-rigetti.readthedocs.io/en/latest/
    sourceCta:
      label: GitHub
      url: https://github.com/rigetti/qiskit-rigetti
    code:
      backend: |-
        from qiskit_rigetti import RigettiQCSProvider
        provider = RigettiQCSProvider()
        backend = provider.get_simulator(num_qubits=5, noisy=True)