- name: Transpile and run
  runMethod: backend
  code: |
    # Build and transpile circuit
    from qiskit import QuantumCircuit, transpile
    circuit = QuantumCircuit(2, 2)
    circuit.h(0)
    circuit.cx(0,1)
    circuit.measure([0,1], [0,1])
    transpiled_circuit = transpile(circuit, backend)

    # Run the circuit and get result
    job = backend.run(transpiled_circuit)
    counts = job.result().get_counts()
    print(counts)

- name: Bell state
  runMethod: sampler
  code: |
    # Build circuit
    from qiskit import QuantumCircuit
    circuit = QuantumCircuit(2, 2)
    circuit.h(0)
    circuit.cx(0,1)
    circuit.measure([0,1], [0,1])

    # Run the circuit and get result distribution
    job = sampler.run(circuit)
    quasi_dist = job.result().quasi_dists[0]
    print(quasi_dist)

- name: VQE
  runMethod: estimator
  code: |
    # Express hydrogen molecule Hamiltonian as an operator
    from qiskit.quantum_info import SparsePauliOp
    H2_op = SparsePauliOp.from_list([
        ("II", -1.052373245772859),
        ("IZ", 0.39793742484318045),
        ("ZI", -0.39793742484318045),
        ("ZZ", -0.01128010425623538),
        ("XX", 0.18093119978423156)
    ])

    # Calculate ground state energy using VQE
    from qiskit.circuit.library import TwoLocal
    from qiskit.algorithms.optimizers import SLSQP
    from qiskit.algorithms.minimum_eigensolvers import VQE

    ansatz = TwoLocal(2, "ry", "cz")
    optimizer = SLSQP(maxiter=100)
    vqe = VQE(estimator, ansatz, optimizer)
    result = vqe.compute_minimum_eigenvalue(operator=H2_op)
    print(result.eigenvalue)

- name: Quantum Volume
  runMethod: sampler
  code: |
    # TODO